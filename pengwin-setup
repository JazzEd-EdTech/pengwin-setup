#!/bin/bash

SetupDir="/usr/local/pengwin-setup.d"

VERSION="1.2a"

source ${SetupDir}/common.sh "$@"

# define functions

function CheckUpgrades {
echo "Updating package database"
sudo apt-get update

# Check for .dist-upgrade file in /etc/apt and inform user dist-upgrade available if so
if [ -f "/etc/apt/.dist-upgrade" ] ; then
	# whiptail prompt here, delete on dist-upgrade
	echo "Distribution upgrade flag noticed! Alerting user"
	if (whiptail --title "Upgrade Available" --yesno "A distribution upgrade is available. In addition to regular package upgrades, this may also install / remove packages. Would you like to continue?\n\nTo run a non-automated distribution upgrade and see package changes, or to perform this in your own time, run 'sudo apt-get dist-upgrade'" 12 90) then
		sudo rm /etc/apt/.dist-upgrade
		sudo apt-get dist-upgrade -y
		exit 0
	fi
fi

# Check if there's any upgrades to pengwin-setup / pengwin-base
echo "Running upgrade check..."
UPGRD_CHECK="$(sudo apt-get upgrade --show-upgraded --assume-no | grep pengwin)"
if [[ "${UPGRD_CHECK}" == *"pengwin"* ]] ; then
	echo "Pengwin core package upgrades found"
	if (whiptail --title "Upgrades Available" --yesno "Updates have been detected for Pengwin core packages. Would you like to update them? (this is highly recommended)\n\pengwin-setup will close after installation complete." 10 90) then

	  # Ensure that packages get updated without affecting other held packages like udev
    sudo apt-mark unhold pengwin-base pengwin-setup > /dev/null 2>&1
		sudo apt-get upgrade pengwin-base pengwin-setup -y
		exit 0
	fi
fi
}

function WelcomePrompt {
whiptail --title "Welcome to Pengwin" --msgbox "Thank you for supporting sustainable independent open source development.\n
Pengwin comes with a core set of useful packages pre-installed, such as curl, git, and wslu.\n
pengwin-setup allows you to install additional hand-curated selections for Pengwin and configure optional WSL-specific settings. \n
Many more packages are available via the apt package manager and optional pip, npm, and RubyGems package managers.\
" 17 80
}

function continue_prompt() {
  if (confirm --title "Continue setup?" --yesno "Would you like to continue pengwin-setup?" 8 45); then
    echo "Starting pengwin-setup."
  else
    echo "Exiting pengwin-setup."
    echo "You may run the script again any time by running: $ pengwin-setup"
    exit 0
  fi
}

function ByeMessage {
    whiptail --title "Setup is complete." --msgbox "You may run pengwin-setup again any time by typing $ pengwin-setup\n\nYou may open a browser link to get help any time by typing: $ pengwin-help" 8 80
    exit 0
}

# main menu
function install_menu() {
  local menu_choice=$(

    menu --title "pengwin-setup" --checklist --separate-output "\nHand-curated add-ons [SPACE to select, ENTER to confirm]:" 23 99 17 \
      "LANGUAGE" "Change default language and keyboard setting in Pengwin" off \
      "EXPLORER" "Enable right-click on folders in Windows Explorer to open them in Pengwin  " off \
      "SHELLS" "Install and configure zsh, csh, fish or readline improvements" off \
      "EDITORS" "Install text editors neovim, emacs, or Visual Studio Code (requires X)" off \
      "PYTHONPI" "Install Python 3.7 and download and install latest PyPi" off \
      "NODEJS" "Install Node.js and npm" off \
      "GO" "Install the latest Go from Google" off \
      "RUBY" "Install Ruby using rbenv and optionally install Rails" off \
      "RUST" "Install latest version of Rust via rustup installer" off \
      "DOTNET" "Install .NET Core SDK from Microsoft and optionally install NuGet" off \
      "JAVA" "Install the Java OpenJDK and JRE" off \
      "POWERSHELL" "Install PowerShell for Linux" off \
      "GUI" "Install the basics needed for most GUI apps and configure GUI options" off \
      "DOCKER" "Install a secure bridge to Docker for Windows" off \
      "CASSANDRA" "Install the NoSQL server Cassandra from Apache" off \
      "CLOUDCLI" "Install CLI tools for cloud management" off \
      "SERVICES" "Enable services support (SSH, rc.local)" off \

  3>&1 1>&2 2>&3)

  echo "Selected:" ${menu_choice}

  if [[ ${menu_choice} == "${CANCELLED}" ]] ; then
    return
  fi

  if [[ ${menu_choice} == *"LANGUAGE"* ]] ; then
    echo "LANGUAGE"
    bash ${SetupDir}/language.sh "$@"
  fi

  if [[ ${menu_choice} == *"EXPLORER"* ]] ; then
    echo "EXPLORER"
    bash ${SetupDir}/explorer.sh "$@"
  fi

  if [[ ${menu_choice} == *"SHELLS"* ]] ; then
    echo "SHELLS"
    bash ${SetupDir}/shells.sh "$@"
  fi

  if [[ ${menu_choice} == *"EDITORS"* ]] ; then
    echo "EDITORS"
    bash ${SetupDir}/editors.sh "$@"
  fi

  if [[ ${menu_choice} == *"PYTHON"* ]] ; then
    echo "PYTHON"
    bash ${SetupDir}/pythonpi.sh "$@"
  fi

  if [[ ${menu_choice} == *"NODE"* ]] ; then
    echo "NODE"
    bash ${SetupDir}/nodejs.sh "$@"
  fi

  if [[ ${menu_choice} == *"GO"* ]] ; then
    echo "GO"
    bash ${SetupDir}/go.sh "$@"
  fi

  if [[ ${menu_choice} == *"RUBY"* ]] ; then
    echo "RUBY"
    bash ${SetupDir}/ruby.sh "$@"
  fi

  if [[ ${menu_choice} == *"RUST"* ]] ; then
    echo "RUST"
    bash ${SetupDir}/rust.sh "$@"
  fi

  if [[ ${menu_choice} == *"DOTNET"* ]] ; then
    echo "DOTNET"
    bash ${SetupDir}/dotnet.sh "$@"
  fi

  if [[ ${menu_choice} == *"JAVA"* ]] ; then
    echo "JAVA"
    bash ${SetupDir}/java.sh "$@"
  fi

  if [[ ${menu_choice} == *"POWERSHELL"* ]] ; then
    echo "POWERSHELL"
    bash ${SetupDir}/powershell.sh "$@"
    bash ${SetupDir}/azurecli.sh "$@"
  fi

  if [[ ${menu_choice} == *"GUI"* ]] ; then
    echo "GUI"
    bash ${SetupDir}/gui.sh "$@"
  fi

  if [[ ${menu_choice} == *"DOCKER"* ]] ; then
    echo "DOCKER"
    bash ${SetupDir}/docker.sh "$@"
  fi

  if [[ ${menu_choice} == *"CASSANDRA"* ]] ; then
    echo "CASSANDRA"
    bash ${SetupDir}/cassandra.sh "$@"
  fi

  if [[ ${menu_choice} == *"CLOUDCLI"* ]] ; then
    echo "CLOUDCLI"
    bash ${SetupDir}/cloudcli.sh "$@"
  fi

  if [[ ${menu_choice} == *"SERVICES"* ]] ; then
    echo "SERVICES"
    bash ${SetupDir}/services.sh "$@"
  fi

}

### Main
WelcomePrompt
continue_prompt

CheckUpgrades
# Ensure our packages are held to prevent odd situation of
# being updated while running other operations from pengwin-setup 
# install menu
echo "Holding pengwin-base & pengwin-setup to ensure no changes while operating"
sudo apt-mark hold pengwin-base pengwin-setup > /dev/null 2>&1

install_menu "$@"

# Unhold our packages
echo "Unholding pengwin-base & pengwin-setup"
sudo apt-mark unhold pengwin-base pengwin-setup > /dev/null 2>&1


ByeMessage
exit 0
