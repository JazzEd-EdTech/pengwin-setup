#!/bin/bash

SetupDir="/usr/local/wlinux-setup.d"
VERSION="1.2a"

source ${SetupDir}/common.sh "$@"

# define functions

function ProcessArguments {
while [[ $# -gt 0 ]]
do
  case "$1" in
    --debug|-d|--verbose|-v)
      echo "Running in debug/verbose mode"
      set -x
      shift
    ;;
    *)
      shift
    esac
done
}

function CheckUpgrades {
echo "Updating package database"
sudo apt-get update

# Check for .dist-upgrade file in /etc/apt and inform user dist-upgrade available if so
if [ -f "/etc/apt/.dist-upgrade" ] ; then
	# whiptail prompt here, delete on dist-upgrade
	echo "Distribution upgrade flag noticed! Alerting user"
	if (whiptail --title "Upgrade Available" --yesno "A distribution upgrade is available. In addition to regular package upgrades, this may also install / remove packages. Would you like to continue?\n\nTo run a non-automated distribution upgrade and see package changes, or to perform this in your own time, run 'sudo apt-get dist-upgrade'" 12 90) then
		sudo rm /etc/apt/.dist-upgrade
		sudo apt-get dist-upgrade -y
		exit 0
	fi
fi

# Check if there's any upgrades to wlinux-setup / wlinux-base
echo "Running upgrade check..."
UPGRD_CHECK="$(sudo apt-get upgrade --show-upgraded --assume-no | grep wlinux)"
if [[ "${UPGRD_CHECK}" == *"wlinux"* ]] ; then
	echo "WLinux core package upgrades found"
	if (whiptail --title "Upgrades Available" --yesno "Updates have been detected for WLinux core packages. Would you like to update them? (this is highly recommended)\n\nwlinux-setup will close after installation complete." 10 90) then

	  # Ensure that packages get updated without affecting other held packages like udev
    sudo apt-mark unhold wlinux-base wlinux-setup > /dev/null 2>&1

		sudo apt-get upgrade wlinux-base wlinux-setup -y

		exit 0
	fi
fi
}

function WelcomePrompt {
whiptail --title "Welcome to WLinux" --msgbox "Thank you for supporting sustainable independent open source development.\n
WLinux comes with a core set of useful packages pre-installed, such as curl, git, and wslu. \n
wlinux-setup allows you to install additional hand-curated selections for WLinux and configure optional WSL-specific settings. \n
Many more packages are available via the apt package manager and optional pip, npm, and RubyGems package managers.\
" 15 96
}

function ContinuePrompt {
if (whiptail --title "Continue setup?" --yesno "Would you like to continue wlinux-setup?" 8 45) then
    echo "Starting wlinux-setup."
else
    echo "Exiting wlinux-setup."
    echo "You may run the script again any time by running: $ wlinux-setup"
    exit 0
fi
}

function ByeMessage {
    whiptail --title "Setup is complete." --msgbox "You may run wlinux-setup again any time by typing $ wlinux-setup\n\nYou may open a browser link to get help any time by typing: $ wlinux-help" 8 80
    exit 0
}

# main menu
function InstallMenu {
MenuChoice=$(
whiptail --title "wlinux-setup" --checklist --separate-output "\nHand-curated add-ons [SPACE to select, ENTER to confirm]:" 22 99 16 \
    "LANGUAGE" "Change default language and keyboard setting in WLinux" off \
    "EXPLORER" "Enable right-click on folders in Windows Explorer to open them in WLinux  " off \
    "SHELLS" "Install and configure zsh, csh, fish or readline improvements" off \
    "EDITORS" "Install text editors neovim, emacs, or Visual Studio Code (requires X)" off \
    "PYTHONPI" "Install Python 3.7 and download and install latest PyPi" off \
    "NODEJS" "Install Node.js and npm" off \
    "GO" "Install the latest Go from Google" off \
    "RUBY" "Install Ruby using rbenv and optionally install Rails" off \
    "RUST" "Install latest version of Rust via rustup installer" off \
    "DOTNET" "Install .NET Core SDK from Microsoft and optionally install NuGet" off \
    "JAVA" "Install the Java OpenJDK and JRE" off \
    "POWERSHELL" "Install PowerShell for Linux and/or Azure CLI tools" off \
    "GUI" "Install the basics needed for most GUI apps and configure GUI options" off \
    "DOCKER" "Install a secure bridge to Docker for Windows" off \
    "CASSANDRA" "Install the NoSQL server Cassandra from Apache" off \
    "CLOUDCLI" "Install CLI tools for cloud management" off 3>&1 1>&2 2>&3
)

ExitStatus=$?
echo "Selected:" $MenuChoice
echo "ExitStatus:" $ExitStatus

if [[ $ExitStatus != 0 ]] ; then
  return
fi

if [[ ! $MenuChoice ]] ; then
  echo "None selected"
  if (whiptail --title "None Selected" --yesno "No item selected. Would you like to return to the install menu?" 10 80) then
  	InstallMenu
  else
  	return
  fi
fi

if [[ $MenuChoice == *"LANGUAGE"* ]] ; then
  echo "LANGUAGE"
  bash ${SetupDir}/language.sh "$@"
fi

if [[ $MenuChoice == *"EXPLORER"* ]] ; then
  echo "EXPLORER"
  bash ${SetupDir}/explorer.sh "$@"
fi

if [[ $MenuChoice == *"SHELLS"* ]] ; then
  echo "SHELLS"
  bash ${SetupDir}/shells.sh "$@"
fi

if [[ $MenuChoice == *"EDITORS"* ]] ; then
  echo "EDITORS"
  bash ${SetupDir}/editors.sh "$@"
fi 

if [[ $MenuChoice == *"PYTHON"* ]] ; then
  echo "PYTHON"
  bash ${SetupDir}/pythonpi.sh "$@"
fi

if [[ $MenuChoice == *"NODE"* ]] ; then
  echo "NODE"
  bash ${SetupDir}/nodejs.sh "$@"
fi

if [[ $MenuChoice == *"GO"* ]] ; then
  echo "GO"
  bash ${SetupDir}/go.sh "$@"
fi

if [[ $MenuChoice == *"RUBY"* ]] ; then
  echo "RUBY"
  bash ${SetupDir}/ruby.sh "$@"
fi

if [[ $MenuChoice == *"RUST"* ]] ; then
  echo "RUST"
  bash ${SetupDir}/rust.sh "$@"
fi

if [[ $MenuChoice == *"DOTNET"* ]] ; then
  echo "DOTNET"
  bash ${SetupDir}/dotnet.sh "$@"
fi

if [[ $MenuChoice == *"JAVA"* ]] ; then
  echo "JAVA"
  bash ${SetupDir}/java.sh "$@"
fi

if [[ $MenuChoice == *"POWERSHELL"* ]] ; then
  echo "POWERSHELL"
  bash ${SetupDir}/powershell.sh "$@"
  bash ${SetupDir}/axurecli.sh "$@"
fi

if [[ $MenuChoice == *"GUI"* ]] ; then
  echo "GUI"
  bash ${SetupDir}/gui.sh "$@"
fi

if [[ $MenuChoice == *"DOCKER"* ]] ; then
  echo "DOCKER"
  bash ${SetupDir}/docker.sh "$@"
fi

if [[ $MenuChoice == *"CASSANDRA"* ]] ; then
  echo "CASSANDRA"
  bash ${SetupDir}/cassandra.sh "$@"
fi

if [[ $MenuChoice == *"CLOUDCLI"* ]] ; then
  echo "CLOUDCLI"
  bash ${SetupDir}/cloudcli.sh "$@"
fi
}

### Main
WelcomePrompt
ContinuePrompt

CheckUpgrades
# Ensure our packages are held to prevent odd situation of
# being updated while running other operations from wlinux-setup 
# install menu
echo "Holding wlinux-base & wlinux-setup to ensure no changes while operating"
sudo apt-mark hold wlinux-base wlinux-setup > /dev/null 2>&1

InstallMenu "$@"

# Unhold our packages
echo "Unholding wlinux-base & wlinux-setup"
sudo apt-mark unhold wlinux-base wlinux-setup > /dev/null 2>&1

ByeMessage
exit 0
